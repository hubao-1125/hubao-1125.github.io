import{_ as s,c as a,f as c,o}from"./app-DAa-7Y-M.js";const n={};function p(t,e){return o(),a("div",null,e[0]||(e[0]=[c(`<p>最近开始整点儿前端的活。</p><p>于是，用了<code>WebStorm</code>写了个小demo开始整，代码会怼到<code>GitHub</code>上去。 但是，发现了个问题，新建项目后，把他分享到<code>GitHub</code>上面去，一切都操作完后，他没有其他<code>IDE</code>的那种<code>init commit</code>，会弹框，让你选择<code>commit</code>,而是自顾自的<code>commit</code>，并且<code>commit</code>的文案，还不用你去想，也不是什么默认的<code>init commit</code>。完全自行发挥。</p><p>于是，对于我这个强迫症患者来说，就想搞一把他，给他上一课。琢磨了一下，发现这个应该是属于<code>WebStorm</code>的<code>bug</code>，那我只能从<code>git</code>上下手了。</p><p><code>git</code>有<code>工作区</code>、<code>暂存区</code>、<code>版本库</code>的概念，就目前这情况来说，我本地仓库是有提交记录，我需要把我的提交记录<code>push</code>给远程仓库。但是，他已经<code>add</code>和<code>commit</code>了。</p><p>那么，问题来了，<code>add</code>和<code>commit</code>操作后，文件去了哪里了呢？</p><p>是的，文件去往了<code>暂存区</code>，我们只需要把<code>暂存区</code>的缓存删除掉，而不是删除<code>工作区</code>的文件，是不是就可以了呢。</p><p>遇事不决就去<code>--help</code></p><p><code>git</code>有个<code>rm</code>命令，他的<code>rm</code>命令后面可以跟参数，找了<code>help</code>的<code>help</code>后，发现有指令可以用。</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki material-theme-ocean vp-code"><code><span class="line"><span style="color:#FFCB6B;">git</span><span class="space"> </span><span style="color:#C3E88D;">rm</span><span class="space"> </span><span style="color:#C3E88D;">-r</span><span class="space"> </span><span style="color:#C3E88D;">--cached</span><span class="space"> </span><span style="color:#C3E88D;">.idea</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这是一个完整的命令，我们来分析一波。</p><p>首先，<code>rm</code>命令，是删除指令，他可以从<code>工作区</code>与<code>暂存区</code>删除文件，他的删除虽然有用，但是，会从<code>工作区</code>删除，肯定不是我们想要的。</p><p>继续往下，你会发现他还有一些其他指令</p><h1 id="r-只显示一个-就可以" tabindex="-1"><a class="header-anchor" href="#r-只显示一个-就可以"><span>-r （只显示一个-就可以）</span></a></h1><p><code>-r</code>，这个<code>-r</code>在<code>git</code>里面是这么描述的</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki material-theme-ocean vp-code"><code><span class="line"><span style="color:#FFCB6B;">-r</span></span>
<span class="line"><span style="color:#FFCB6B;">Allow</span><span class="space"> </span><span style="color:#C3E88D;">recursive</span><span class="space"> </span><span style="color:#C3E88D;">removal</span><span class="space"> </span><span style="color:#C3E88D;">when</span><span class="space"> </span><span style="color:#C3E88D;">a</span><span class="space"> </span><span style="color:#C3E88D;">leading</span><span class="space"> </span><span style="color:#C3E88D;">directory</span><span class="space"> </span><span style="color:#C3E88D;">name</span><span class="space"> </span><span style="color:#C3E88D;">is</span><span class="space"> </span><span style="color:#C3E88D;">given.</span></span>
<span class="line"><span style="color:#FFCB6B;">当给出了主目录名时，允许递归删除。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>昂，加这个参数的目的是为了防止<code>.idea</code>或者指令后面其他的目录有多层嵌套。</p><h1 id="cached-只让显示一个-不是我少" tabindex="-1"><a class="header-anchor" href="#cached-只让显示一个-不是我少"><span>-cached （只让显示一个-，不是我少-）</span></a></h1><p><code>--cached</code>，这个命令是让对应文件夹或者文件，从<code>git</code>的跟踪清单里面删除。他在<code>git</code>里面是这么描述的。</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki material-theme-ocean vp-code"><code><span class="line"><span style="color:#FFCB6B;">--cached</span></span>
<span class="line"><span style="color:#FFCB6B;">Use</span><span class="space"> </span><span style="color:#C3E88D;">this</span><span class="space"> </span><span style="color:#C3E88D;">option</span><span class="space"> </span><span style="color:#C3E88D;">to</span><span class="space"> </span><span style="color:#C3E88D;">unstage</span><span class="space"> </span><span style="color:#C3E88D;">and</span><span class="space"> </span><span style="color:#C3E88D;">remove</span><span class="space"> </span><span style="color:#C3E88D;">paths</span><span class="space"> </span><span style="color:#C3E88D;">only</span><span class="space"> </span><span style="color:#C3E88D;">from</span><span class="space"> </span><span style="color:#C3E88D;">the</span><span class="space"> </span><span style="color:#C3E88D;">index.</span><span class="space"> </span><span style="color:#C3E88D;">Working</span><span class="space"> </span><span style="color:#C3E88D;">tree</span><span class="space"> </span><span style="color:#C3E88D;">files,</span><span class="space"> </span><span style="color:#C3E88D;">whether</span><span class="space"> </span><span style="color:#C3E88D;">modified</span><span class="space"> </span><span style="color:#C3E88D;">or</span><span class="space"> </span><span style="color:#C3E88D;">not,</span><span class="space"> </span><span style="color:#C3E88D;">will</span><span class="space"> </span><span style="color:#C3E88D;">be</span><span class="space"> </span><span style="color:#C3E88D;">left</span><span class="space"> </span><span style="color:#C3E88D;">alone.</span></span>
<span class="line"><span style="color:#FFCB6B;">使用此选项可取消分级并仅从索引中删除路径。工作树文件，无论是否被修改，都将被单独保留。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我这翻译都是机翻啊，见谅。这个大致意思就是从索引中删除，那么索引是什么呢？答案是<code>暂存区</code>。之所以叫<code>暂存区</code>实际上是为了更加贴合中文的语境。</p><p>那么，这就明白了，从<code>暂存区</code>删除后，我们可以通过<code>.gitignore</code>过滤掉<code>.idea</code>文件夹，让他不要被提交就可以了。</p>`,21)]))}const d=s(n,[["render",p],["__file","index.html.vue"]]),i=JSON.parse(`{"path":"/doc/IDE/092347/","title":"WebStorm创建项目后git提交会把.idea提交上去解决方法","lang":"zh-CN","frontmatter":{"title":"WebStorm创建项目后git提交会把.idea提交上去解决方法","createTime":"2025/02/01 09:23:47","permalink":"/doc/IDE/092347/","copyright":{"author":{"name":"Hu Bao","url":"https://github.com/hubao-1125"}},"tags":["IDE","WebStorm"],"description":"最近开始整点儿前端的活。 于是，用了WebStorm写了个小demo开始整，代码会怼到GitHub上去。 但是，发现了个问题，新建项目后，把他分享到GitHub上面去，一切都操作完后，他没有其他IDE的那种init commit，会弹框，让你选择commit,而是自顾自的commit，并且commit的文案，还不用你去想，也不是什么默认的init co...","head":[["meta",{"property":"og:url","content":"https://hubao-1125.github.io/doc/IDE/092347/"}],["meta",{"property":"og:site_name","content":"Hu bao's blog"}],["meta",{"property":"og:title","content":"WebStorm创建项目后git提交会把.idea提交上去解决方法"}],["meta",{"property":"og:description","content":"最近开始整点儿前端的活。 于是，用了WebStorm写了个小demo开始整，代码会怼到GitHub上去。 但是，发现了个问题，新建项目后，把他分享到GitHub上面去，一切都操作完后，他没有其他IDE的那种init commit，会弹框，让你选择commit,而是自顾自的commit，并且commit的文案，还不用你去想，也不是什么默认的init co..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-01T01:27:33.000Z"}],["meta",{"property":"article:tag","content":"IDE"}],["meta",{"property":"article:tag","content":"WebStorm"}],["meta",{"property":"article:modified_time","content":"2025-02-01T01:27:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebStorm创建项目后git提交会把.idea提交上去解决方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-01T01:27:33.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":2.51,"words":752},"git":{"updatedTime":1738373253000,"contributors":[{"name":"hubao-1125","username":"hubao-1125","email":"19473254+hubao-1125@users.noreply.github.com","commits":1,"avatar":"https://avatars.githubusercontent.com/hubao-1125?v=4","url":"https://github.com/hubao-1125"}]},"autoDesc":true,"filePathRelative":"doc/IDE/WebStorm创建项目后git提交会把.idea提交上去解决方法.md","categoryList":[{"id":"9a09b4","sort":10000,"name":"doc"},{"id":"f6c844","sort":10016,"name":"IDE"}]}`);export{d as comp,i as data};
